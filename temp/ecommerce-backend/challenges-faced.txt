What is the Jackson infinite rescursion problem?
The issue arises whenever there are cyclic references between two entities, leading 
to an infinite loop as Jackson tries to serialize the entity object sent in 
response.

This issue whenever Jackson encounters a bidirectional relationship regardless of 
whether it’s:

- One-to-One
- One-to-Many
- Many-to-Many

Example:
When Jackson encounters a bidirectional relationship, it will start serializing one 
entity, say Category, and include the List<Product>. Then, when it serializes each 
Product in the list, it encounters the Category reference in Product and tries to 
serialize it again, leading back to Category — creating an endless loop.


How to prevent this Jackson infinite rescursion problem?
1. Use @JsonManagedReference and @JsonBackReference:

In this approach:

Use @JsonManagedReference on the @OneToMany side (in Category).
Use @JsonBackReference on the @ManyToOne side (in Product).

When you fetch Category, it will serialize with Product details 
(excluding the Category in each Product), preventing a cyclic loop.

** Likewise, fetching Product alone will also avoid the loop. And when we just 
fetch a single Product then:

- If we have specified fetch=FetchType.LAZY on @ManyToOne in Product entity then 
accessing the category field in the Product entity would retrieve the associated 
category information from database for that Product and load it into memory. But
this category won't be serialized into the response.

- If we have specified fetch=FetchType.EAGER on @ManyToOne in Product entity
then category field would have been fetched already from the database when we 
fetched the Product but again this category won't be serialized into the 
response.

2. Use @JsonIgnore on One Side:
If you don’t need to include both sides of the relationship in the response, you 
can simply use @JsonIgnore on the category field in Product or the products field 
in Category.

3.  Use DTOs to Customize Responses:
If you have different needs for different endpoints (e.g., Product with minimal 
Category info, or Category with just basic Product info), creating separate DTOs 
for these use cases provides the most control. With DTOs, you can explicitly define 
which fields to include in each response.

For instance:

- Create a ProductDTO with only the necessary Product fields and a minimal Category 
reference:

package com.shri.ecommercebackend.dto;

import java.math.BigDecimal;

public class ProductDTO {
	
	private int productID;
	
	private String productName;
	
	private BigDecimal productPrice;
	
	private int availableQuantity;

	public ProductDTO(int productID, String productName, BigDecimal productPrice, int availableQuantity) {
		this.productID = productID;
		this.productName = productName;
		this.productPrice = productPrice;
		this.availableQuantity = availableQuantity;
	}

	public int getProductID() {
		return productID;
	}

	public String getProductName() {
		return productName;
	}

	public BigDecimal getProductPrice() {
		return productPrice;
	}

	public int getAvailableQuantity() {
		return availableQuantity;
	}

}

- Create a CategoryDTO that contains basic Category details and a list of 
ProductDTO (if needed):

package com.shri.ecommercebackend.dto;

import java.util.List;

public class CategoryProductsDTO {
	
	private int categoryId;
	
	private String categoryName;
	
	private List<ProductDTO> products;

	public CategoryProductsDTO(int categoryId, String categoryName, List<ProductDTO> products) {
		this.categoryId = categoryId;
		this.categoryName = categoryName;
		this.products = products;
	}

	public int getCategoryId() {
		return categoryId;
	}

	public String getCategoryName() {
		return categoryName;
	}

	public List<ProductDTO> getProducts() {
		return products;
	}

}

- Convert Entities to DTOs in the DAO Layer:

package com.shri.ecommercebackend.dao;

import java.util.List;
import java.util.stream.Collectors;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.shri.ecommercebackend.dto.CategoryProductsDTO;
import com.shri.ecommercebackend.dto.ProductDTO;
import com.shri.ecommercebackend.entity.Category;
import com.shri.ecommercebackend.exception.CategoryNotFoundException;

@Repository
public class ProductDAOImpl implements ProductDAO {

	@Autowired
	private SessionFactory sessionFactory;

	@Override
	public CategoryProductsDTO getProductsByCategory(byte categoryId) {
		Session currentSession = sessionFactory.getCurrentSession();
		
		Category category = currentSession.get(Category.class, categoryId);
		
		System.out.println(category);
		
		if(category == null) throw new CategoryNotFoundException("Category id: "+ categoryId + " not found!");
		
		System.out.println(category.getProducts());
		
		List<ProductDTO> productDTOs = category.getProducts()
		.stream()
		.map(product -> new ProductDTO(product.getProductId(), product.getProductName(), product.getPrice(), 
				product.getAvailableQuantity())).collect(Collectors.toList());
		
		return new CategoryProductsDTO(category.getCategoryId(), category.getCategoryName(), productDTOs);
	}

}

What is DTO?
DTOs (Data Transfer Objects) is used to control the data structure of the API 
responses i.e. what to include and what to not include in API response without 
changing the entity structure or risking cyclic dependencies.

What is org.springframework.http.ResponseEntity<T> class?
ResponseEntity is essentially a wrapper for the entity T that allows you to 
customize the HTTP response beyond just sending the serialized entity. The primary 
reasons to use ResponseEntity are:

1. Setting the HTTP Status Code: This is the most common reason to use ResponseEntity, 
as it lets you explicitly set the HTTP status code for the response. If you return 
a raw entity (like an ErrorResponse object), Spring assumes a default status 
(usually 200 OK).

2. Adding Custom HTTP Headers: ResponseEntity allows you to add headers to the 
response. This is useful if you need to include metadata in the response, like
caching headers, location headers for resource creation, or content-type headers.

3. Returning Custom Objects as the Response Body: 
We can also return custom objects as the response body, which will be automatically 
serialized to the specified content type.

Why we are specifying the HTTP status code both in ErrorResponse and in the 
ResponseEntity constructor?

@RestController
@RequestMapping("/api")
public class ProductRestController {
	
	@Autowired
	private ProductService productSerivce;

    @GetMapping(path = "/v1/categories/{categoryId}/products")
	public CategoryProductsDTO getProductsByCategory(@PathVariable byte categoryId) {
		
		if(categoryId <= 0) throw new CategoryNotFoundException("Category id: "+ categoryId + " not found!");
		return productSerivce.getProductsByCategory(categoryId);
	}
	
	@ExceptionHandler
	public ResponseEntity<ErrorResponse> handleException(CategoryNotFoundException exc) {
		
		ErrorResponse errorResponse = new ErrorResponse(HttpStatus.NOT_FOUND.value(), exc.getMessage(), 
				System.currentTimeMillis());
		
		return new ResponseEntity<ErrorResponse>(errorResponse, HttpStatus.NOT_FOUND);
		
	}

}


HttpStatus in ErrorResponse:

Including the status code in ErrorResponse makes it part of the error message payload 
itself.

- This is beneficial if the response body is logged, sent to monitoring tools, or 
used for debugging by client applications. It allows clients to see the status 
code directly in the response body, even if they don't have direct access to the 
HTTP status code.

HttpStatus in ResponseEntity Constructor:

- Specifying the HttpStatus in the ResponseEntity constructor actually sets the 
HTTP response status for the client.