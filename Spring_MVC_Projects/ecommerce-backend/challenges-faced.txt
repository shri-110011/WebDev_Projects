What is the Jackson infinite rescursion problem?
The issue arises whenever there are cyclic references between two entities, leading 
to an infinite loop as Jackson tries to serialize the entity object sent in 
response.

This issue whenever Jackson encounters a bidirectional relationship regardless of 
whether it’s:

- One-to-One
- One-to-Many
- Many-to-Many

Example:
When Jackson encounters a bidirectional relationship, it will start serializing one 
entity, say Category, and include the List<Product>. Then, when it serializes each 
Product in the list, it encounters the Category reference in Product and tries to 
serialize it again, leading back to Category — creating an endless loop.


How to prevent this Jackson infinite rescursion problem?
1. Use @JsonManagedReference and @JsonBackReference:

In this approach:

Use @JsonManagedReference on the @OneToMany side (in Category).
Use @JsonBackReference on the @ManyToOne side (in Product).

When you fetch Category, it will serialize with Product details 
(excluding the Category in each Product), preventing a cyclic loop.

** Likewise, fetching Product alone will also avoid the loop. And when we just 
fetch a single Product then:

- If we have specified fetch=FetchType.LAZY on @ManyToOne in Product entity then 
accessing the category field in the Product entity would retrieve the associated 
category information from database for that Product and load it into memory. But
this category won't be serialized into the response.

- If we have specified fetch=FetchType.EAGER on @ManyToOne in Product entity
then category field would have been fetched already from the database when we 
fetched the Product but again this category won't be serialized into the 
response.

2. Use @JsonIgnore on One Side:
If you don’t need to include both sides of the relationship in the response, you 
can simply use @JsonIgnore on the category field in Product or the products field 
in Category.

3.  Use DTOs to Customize Responses:
If you have different needs for different endpoints (e.g., Product with minimal 
Category info, or Category with just basic Product info), creating separate DTOs 
for these use cases provides the most control. With DTOs, you can explicitly define 
which fields to include in each response.

For instance:

- Create a ProductDTO with only the necessary Product fields and a minimal Category 
reference:

package com.shri.ecommercebackend.dto;

import java.math.BigDecimal;

public class ProductDTO {
	
	private int productID;
	
	private String productName;
	
	private BigDecimal productPrice;
	
	private int availableQuantity;

	public ProductDTO(int productID, String productName, BigDecimal productPrice, int availableQuantity) {
		this.productID = productID;
		this.productName = productName;
		this.productPrice = productPrice;
		this.availableQuantity = availableQuantity;
	}

	public int getProductID() {
		return productID;
	}

	public String getProductName() {
		return productName;
	}

	public BigDecimal getProductPrice() {
		return productPrice;
	}

	public int getAvailableQuantity() {
		return availableQuantity;
	}

}

- Create a CategoryDTO that contains basic Category details and a list of 
ProductDTO (if needed):

package com.shri.ecommercebackend.dto;

import java.util.List;

public class CategoryProductsDTO {
	
	private int categoryId;
	
	private String categoryName;
	
	private List<ProductDTO> products;

	public CategoryProductsDTO(int categoryId, String categoryName, List<ProductDTO> products) {
		this.categoryId = categoryId;
		this.categoryName = categoryName;
		this.products = products;
	}

	public int getCategoryId() {
		return categoryId;
	}

	public String getCategoryName() {
		return categoryName;
	}

	public List<ProductDTO> getProducts() {
		return products;
	}

}

- Convert Entities to DTOs in the DAO Layer:

package com.shri.ecommercebackend.dao;

import java.util.List;
import java.util.stream.Collectors;

import org.hibernate.Session;
import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import com.shri.ecommercebackend.dto.CategoryProductsDTO;
import com.shri.ecommercebackend.dto.ProductDTO;
import com.shri.ecommercebackend.entity.Category;
import com.shri.ecommercebackend.exception.CategoryNotFoundException;

@Repository
public class ProductDAOImpl implements ProductDAO {

	@Autowired
	private SessionFactory sessionFactory;

	@Override
	public CategoryProductsDTO getProductsByCategory(byte categoryId) {
		Session currentSession = sessionFactory.getCurrentSession();
		
		Category category = currentSession.get(Category.class, categoryId);
		
		System.out.println(category);
		
		if(category == null) throw new CategoryNotFoundException("Category id: "+ categoryId + " not found!");
		
		System.out.println(category.getProducts());
		
		List<ProductDTO> productDTOs = category.getProducts()
		.stream()
		.map(product -> new ProductDTO(product.getProductId(), product.getProductName(), product.getPrice(), 
				product.getAvailableQuantity())).collect(Collectors.toList());
		
		return new CategoryProductsDTO(category.getCategoryId(), category.getCategoryName(), productDTOs);
	}

}

What is DTO?
DTOs (Data Transfer Objects) is used to control the data structure of the API 
responses i.e. what to include and what to not include in API response without 
changing the entity structure or risking cyclic dependencies.

What is org.springframework.http.ResponseEntity<T> class?
ResponseEntity is essentially a wrapper for the entity T that allows you to 
customize the HTTP response beyond just sending the serialized entity. The primary 
reasons to use ResponseEntity are:

1. Setting the HTTP Status Code: This is the most common reason to use ResponseEntity, 
as it lets you explicitly set the HTTP status code for the response. If you return 
a raw entity (like an ErrorResponse object), Spring assumes a default status 
(usually 200 OK).

2. Adding Custom HTTP Headers: ResponseEntity allows you to add headers to the 
response. This is useful if you need to include metadata in the response, like
caching headers, location headers for resource creation, or content-type headers.

3. Returning Custom Objects as the Response Body: 
We can also return custom objects as the response body, which will be automatically 
serialized to the specified content type.

Why we are specifying the HTTP status code both in ErrorResponse and in the 
ResponseEntity constructor?

@RestController
@RequestMapping("/api")
public class ProductRestController {
	
	@Autowired
	private ProductService productSerivce;

    @GetMapping(path = "/v1/categories/{categoryId}/products")
	public CategoryProductsDTO getProductsByCategory(@PathVariable byte categoryId) {
		
		if(categoryId <= 0) throw new CategoryNotFoundException("Category id: "+ categoryId + " not found!");
		return productSerivce.getProductsByCategory(categoryId);
	}
	
	@ExceptionHandler
	public ResponseEntity<ErrorResponse> handleException(CategoryNotFoundException exc) {
		
		ErrorResponse errorResponse = new ErrorResponse(HttpStatus.NOT_FOUND.value(), exc.getMessage(), 
				System.currentTimeMillis());
		
		return new ResponseEntity<ErrorResponse>(errorResponse, HttpStatus.NOT_FOUND);
		
	}

}

HttpStatus in ErrorResponse:

Including the status code in ErrorResponse makes it part of the error message payload 
itself.

- This is beneficial if the response body is logged, sent to monitoring tools, or 
used for debugging by client applications. It allows clients to see the status 
code directly in the response body, even if they don't have direct access to the 
HTTP status code.

HttpStatus in ResponseEntity Constructor:

- Specifying the HttpStatus in the ResponseEntity constructor actually sets the 
HTTP response status for the client.

How to run code after the Spring Context gets setup?
Use ApplicationListener interface or @EventListener Annotation.

1. ApplicationListener Interface
Type: This is a more traditional and explicit approach to listen to events.
Syntax: You need to implement the ApplicationListener<T> interface and override 
the onApplicationEvent method.

Example:
import org.springframework.context.ApplicationListener;
import org.springframework.context.event.ContextRefreshedEvent;
import org.springframework.stereotype.Component;

@Component
public class ApplicationStartupListener implements ApplicationListener<ContextRefreshedEvent> {

    @Override
    public void onApplicationEvent(ContextRefreshedEvent event) {
        // Logic to execute when the context is refreshed
        System.out.println("Spring Application Context is refreshed");
    }
}

** Here we are listening to ContextRefreshedEvent.

** Note: To know more about events in SpringBoot.
https://medium.com/hprog99/mastering-events-in-spring-boot-a-comprehensive-guide-86348f968fc6

2. @EventListener Annotation

Type: This is a more modern and flexible approach, relying on Spring's annotations.
Syntax: You use the @EventListener annotation on a method to indicate that the 
method should listen to a specific event.

Example:

import org.springframework.context.event.ContextRefreshedEvent;
import org.springframework.stereotype.Component;
import org.springframework.context.event.EventListener;

@Component
public class ApplicationStartupListener {

    @EventListener
    public void handleContextRefresh(ContextRefreshedEvent event) {
        // Logic to execute when the context is refreshed
        System.out.println("Spring Application Context is refreshed");
    }
}

** Note: Both of these below event listeners using @EventListener are equivalent.

Using @EventListener without specifying the event type in the annotation:
@EventListener
public void loadProductsIntoCache(ContextRefreshedEvent event) {

}

Using @EventListener with the event type specified:
@EventListener(ContextRefreshedEvent.class)
public void loadProductsIntoCache() {

}

Should we do the mapping of database query results to DTO object in the DAO layer
or in service layer?
It’s best to perform the mapping of database query results to DTO (Data Transfer 
Object) objects in the DAO layer because:

1. Single Responsibility:
The DAO’s responsibility is to handle data access and data transformations from raw 
database output to usable objects. By mapping to DTOs in the DAO, you keep the 
service layer focused on business logic rather than data retrieval specifics.

2. Encapsulation of Database Logic:
If you ever change the underlying database schema or SQL query, you can make 
adjustments in the DAO without modifying the service layer. The service layer 
will simply use the DTOs returned by the DAO.

3. Separation of Concerns:
The service layer should remain decoupled from the database details. By receiving 
a clean DTO from the DAO, the service class can focus solely on business logic, 
rather than handling raw data or conversions.

Isn't  the service layer only delegating calls to DAO, what business logic is 
put in service layer?
The service layer is meant to encapsulate business logic, it does more than simply 
delegate calls to the DAO layer. The service layer makes the decision-making
while performing a sequence of steps required to complete a task.

Here’s how the service layer generally adds value:

1. Coordination of Multiple DAOs:
A service method often coordinates tasks across multiple DAOs. For example, 
in a checkout process, a CheckoutService might:
- Make entries of the cart items using InventoryEventLogDAO.
- Generate reservation id for the cart using ReservationDAO.
- Store cart items inventoryEventIds and reservation id using ReservationDAO.

2. Application of Business Rules:
- Check product availability information from Redis.
- Deduct the availableQuantity information once enough stock is there.
- Enforcing limits on certain actions (e.g., a user can only purchase a certain 
number of items).

3. Transaction Management:
- The service layer is often where transactions are managed. If multiple DAO 
operations need to occur as a single unit, the service layer will ensure they 
succeed or fail together.

- In Spring, you can manage this with @Transactional at the service layer, so that 
if one part of a multi-step operation fails, the entire transaction can be rolled 
back.

4. Data Transformation and Aggregation:
Sometimes, data needs to be processed or combined from different sources before 
being returned. For example:
- Merging data from multiple DAOs into a single result object.

- Performing calculations, like aggregating order totals.

The service layer can handle this logic, making it easier to reuse across different 
parts of the application.

5. Caching Logic:
The service layer often decides when to use the cache or when to go directly to 
the database.

For instance, it could check if product details are in Redis, and if not, fetch 
them from the database, store them in Redis, and then return them. This caching 
logic keeps the DAO layer focused solely on data access

6. Validation and Exception Handling:
While some validations (like null checks) may occur in the DAO, more complex 
validations often go in the service layer.

For example:
Verifying that a user has sufficient balance before making a purchase.

How to retrieve selective fields from each row/entity instead of fetching the 
entire entity and map it to a DTO?
Use constructor expressions in HQL (Hibernate Query Language) to retrieve only 
the desired fields and map them into a DTO (ProductIdQuantityDTO). 

What are constructor expressions in HQL? 
In Hibernate, constructor expressions allow you to select specific fields from an 
entity and directly map them to a new object (usually a DTO or a custom result object) 
in a single query. This is an efficient way to retrieve only the fields you need, 
instead of fetching the entire entity, which can be particularly useful in situations 
where you want to optimize performance and reduce memory usage.

A constructor expression in HQL is a part of the SELECT clause that instantiates a 
Java object using the new keyword.


Example:
Query<ProductIdQuantityDTO> query = session.createQuery(
    "SELECT new com.example.dto.ProductIdQuantityDTO(p.productId, p.availableQuantity) " + 
    "FROM Product p", ProductIdQuantityDTO.class);

List<ProductIdQuantityDTO> resultList = query.getResultList();

Explanation:
- The SELECT clause uses the new keyword to create a new ProductIdQuantityDTO object 
for each row in the result set.

- Only the productId and availableQuantity fields are selected from the Product 
entity, so only these fields will be fetched from the database.

- The ProductIdQuantityDTO.class tells Hibernate to map the results to instances 
of the ProductIdQuantityDTO class.

Constructor Expression Limitations:

1. Constructor Matching:
The constructor expression requires that the DTO class must have a constructor 
that matches the parameters you are selecting. The parameter types in the 
constructor must match the types of the fields you're selecting in the query.

2. No Nested Objects:
Constructor expressions cannot be used to instantiate nested objects (e.g., a 
list of entities). You can only map directly to simple objects (e.g., DTOs, 
primitive values).

What is @Transactional(readOnly = true)?
For read-only database operations, using @Transactional(readOnly = true) is generally 
better than not using it at all. Here's why:

1. Optimized for Performance:

- When you mark a transaction as readOnly, the underlying database can optimize 
the execution.

- It indicates that no changes will be made to the database, so the database 
doesn't need to track changes to entities, which can improve performance.

2. Transaction Isolation:

By using @Transactional(readOnly = true), you ensure that the database transaction 
will use the correct isolation level for read operations, avoiding the risks 
associated with dirty reads, non-repeatable reads, or phantom reads, depending 
on your database configuration.

Why using @PostConstruct on
@Override
@Transactional(readOnly = true)
public void loadProductsIntoCache() present in 
ProductLoadServiceImpl class not a good idea?

Because we would get:
org.springframework.beans.factory.BeanCreationException: Error creating bean 
with name 'productLoadServiceImpl': Invocation of init method failed; nested 
exception is org.hibernate.HibernateException: Could not obtain 
transaction-synchronized Session for current thread

This error occurs because:
When @Transactional is used in Spring, it ensures that the method is executed 
within a transaction context and that Hibernate can access the current 
session.

And The @PostConstruct method is called after the bean is initialized, and it's 
executed before the Spring context is fully set up for transaction management.

What is flow to make reservations during checkout?
1. Capture Checkout Items: When the user initiates checkout, gather all items in 
the cart and check the availableQuantity for prodcuts in Redis.
    1.1 If some cart items are not there in Redis make database call to fetch them and 
    store them in Redis.
    1.2 Update the availableQuantity by decrementing it if there is enough stock.
    1.3 In case some products are not available then proceed with partial reservation.

2. Reserve items in inventory_event_log Table:

Insert the items into the inventory_event_log table to indicate that they are reserved.

Capture the event_id of these items.

3. Create reservation record:

Create a new entry in the reservations table with the following details:
user_id: to associate the reservation with the specific user.
expires_at: to indicate when the reservation should expire.
Generate a reservation_id.

4. Link reservations to inventory_event_log:

Insert each reserved item’s inventory_event_id and the reservation_id into the 
inventory_events_orders_reservations_link table to associate the reservation with specific items.

5. Store reservation data in session (or return to frontend):

Store the reservation_id in the user’s session, or send it back to the frontend if 
you need the reservation to persist across requests.

What is partial reservation?
In case when we are dealing with a mix of available and unavailable items in 
the cart, we would make reservation for the items that have enough stock. And 
in the checkout api response we would inform the reserved and unavailable items.

What kind of response should the checkout API send in case of partial 
reservation approach?

HTTP Status Code:
Use 200 OK if at least one item was reserved successfully.
400 Bad Request if none of the items could be reserved due to insufficient stock.

Response Structure:
See the /baseURL/api/v1/reserve-items api in requirements.txt file.

What if some items are not prsent in Redis and in the database ?
If a product is missing (not found in Redis or the database), record it as an 
invalid item in the response but proceed with the reservation for the other items.

In the checkout api response under the "invalidItems" key we can find 
the invalid items.

Isn't specifying the price in the request body during checkout risky because 
the price can be tampered?
Yes the user can tamper the request body and set a lower price for a product.
To avoid this we can use Price Validation Strategy.

What is this Price Validation Strategy and how does it work?
The backend will use the productId to check if the price in request match the latest price in server.

If the prices don't match we can we can keep track of those items and send them 
back in the checkout api repsonse under the "priceMismatchItems" key.

Response Structure:
See the /baseURL/api/v1/reserve-items api in requirements.txt file.

If a user sees the old price in Redis/products table for a product during checkout, 
after that product's price has been updated in product_price_history. Can we 
tolearate the small gap b/w price updates in the product_price_history table and the 
products table? 

Yes we can tolearate the gap of few seconds.

Why do we have product_price_history table?
Because it enables us to keep track of price changes for each product by using means like 
current_price_version and price_change_datetime. These will be useful for analytics purposes.  

How to prevent code duplication in DTOs and also be able to customize the serialization process for
the DTOs?
Use inheritance or object composition to prevent code duplication in DTOs.

Example:
ProductDTO and ProductInventoryDTO have overlapping fields productId, availableQuantity, price.
And ProductDTO has an additional field productName.

So we can use object composition and have a reference variable of type ProductInventoryDTO in 
ProductDTO class.

And this object composition will lead to inclusion of 'productInventoryDTO' as key in the response.
To avoid that we need to customize the serialization by creating a custom serializer for ProductDTO.

Example:
//Custom serializer for ProductDTO
class ProductDTOJsonSerializer extends JsonSerializer<ProductDTO> {
	
	 @Override
	 public void serialize(ProductDTO value, JsonGenerator gen, SerializerProvider serializers) throws IOException {
	     gen.writeStartObject();
	     gen.writeNumberField("productId", value.getProductInventoryDTO().getProductId());
	     gen.writeNumberField("availableQuantity", value.getProductInventoryDTO().getAvailableQuantity());
	     gen.writeNumberField("price", value.getProductInventoryDTO().getPrice());
	     gen.writeStringField("productName", value.getProductName());
	     gen.writeEndObject();
	 }
 
}

And annotate ProductDTO by @JsonSerialize(using = ProductDTOJsonSerializer.class)

How to make the foreign key of an entity the primary key of that entity as well?
or
How to make an entity to share the same primary key as another entity?

1. Use @MapsId on the parent entity reference present in the child entity class.
2. And create a field in child entity class having same type as the primary key of parent entity 
and annotate it with @Id.

Example:

@Entity
@Table(name = "inventory_events_orders_reservations_link")
public class InventoryEventOrderReservationLink {

	@Id
	private int id;
	
	@OneToOne(cascade = CascadeType.ALL)
	@MapsId
	@JoinColumn(name = "inventory_event_id")
	private InventoryEventLog inventoryEventLog;

	...
}

@Entity
@Table(name = "inventory_events_log")
public class InventoryEventLog {
	
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(name = "event_id")
	private int eventId;

	...
}

How to create a composite key for an entity class?
1. Create a class representing that composite key and annotate it with @Embeddable.
2. Make the composite key class implement java.io.Serializable interface.
3. Now create a reference for that composite key in the entity class where you want that composite
key. And annotate that reference with @EmbeddedId.

Example:

@Entity
@Table(name = "order_items")
public class OrderItem {
	
	@EmbeddedId
	private OrderItemKey orderItemKey;
	
	@Column(name = "quantity")
	private int quantity;
	
	@Column(name = "price_at_purchase")
	private BigDecimal priceAtPurchase;
	
	public OrderItem() {
	
	}
		
	public OrderItem(int orderId, int productId, int quantity, BigDecimal priceAtPurchase) {
		this.orderItemKey = new OrderItemKey(orderId, productId);
		this.quantity = quantity;
		this.priceAtPurchase = priceAtPurchase;
	}

	...
}

@Embeddable
public class OrderItemKey implements Serializable {
	
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;

	@Column(name = "order_id")
	private int orderId;
	
	@Column(name = "product_id")
	private int productId;

	public OrderItemKey() {
	
	}

	public OrderItemKey(int orderId, int productId) {
		this.orderId = orderId;
		this.productId = productId;
	}

	public int getOrderId() {
		return orderId;
	}

	public void setOrderId(int orderId) {
		this.orderId = orderId;
	}

	public int getProductId() {
		return productId;
	}

	public void setProductId(int productId) {
		this.productId = productId;
	}

	@Override
	public int hashCode() {
		return Objects.hash(orderId, productId);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj)
			return true;
		if (obj == null)
			return false;
		if (getClass() != obj.getClass())
			return false;
		OrderItemKey other = (OrderItemKey) obj;
		return orderId == other.orderId && productId == other.productId;
	}

	@Override
	public String toString() {
		return "OrderItemKey [orderId=" + orderId + ", productId=" + productId + "]";
	}

}

How to map the timestamp value that we get from database in the entity class?
One way is to use the LocalDateTime type of reference in the entity class and map it to the
timestamp column using @Column.

Example:

@Entity
@Table(name = "orders")
public class Order {
	
	@Id
	@GeneratedValue(strategy = GenerationType.IDENTITY)
	@Column(name = "order_id")
	private int orderId;

	@Column(name = "order_creation_datetime", insertable = false, updatable = false)
	private LocalDateTime orderCreationDateTime;

	...
}

How to handle timezone issues when working with datetime values?

1. Store timestamp in UTC format in the database.
For this add this in the server section of mysql configuration file:
default_time_zone='+00:00'

For location of mysql configuration file:
Open Services > Rightclick on MySQL > Properties > 
Under 'Path to executable' after '--default-file' you will see the path.

2. Add the serverTimezone=UTC in the JDBC url.
Example:
<property name="jdbcUrl"
	value="jdbc:mysql://localhost:3306/ecommerce_db?allowPublicKeyRetrieval=true&amp;useSSL=false&amp;serverTimezone=UTC" />
in the Spring mvc configuration file.

3. Add this as hibernate properties in the Spring mvc configuration file.
<prop key="hibernate.jdbc.time_zone">Asia/Kolkata</prop>

In place of Asia/Kolkata we can put the timezone in which we want the fetched timestamp value 
from database to be converted to while mapping it to the LocalDateTime reference.
